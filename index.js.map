{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\nconst request = require('request');\n\n/**\n * RealTimeCat Client\n */\nclass Client {\n\n    /**\n     * Constructor\n     * @param apiKey\n     * @param apiSecret\n     */\n    constructor(apiKey, apiSecret) {\n        if (typeof apiKey === 'undefined') {\n            throw new Error('API Key 不能为空')\n        }\n        else if (typeof apiSecret === 'undefined') {\n            throw new Error('API Secret 不能为空')\n        }\n        this.version = '0.2.0';\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        //this.apiUrl = 'https://api.realtimecat.com/';\n        this.apiUrl = 'http://127.0.0.1:8000';\n        this.endpoints = {\n            info: '/v0.2/',\n            sessions: '/v0.2/sessions',\n            permanentSessions: '/v0.2/sessions/persistent',\n            temporarySessions: '/v0.2/sessions/nonpersistent',\n            session: '/v0.2/session/',\n            tokens: '/v0.2/sessions/{session_id}/tokens',\n            permanentTokens: '/v0.2/sessions/{session_id}/tokens/persistent',\n            temporaryTokens: '/v0.2/sessions/{session_id}/tokens/nonpersistent',\n            token: '/v0.2/token/',\n            records: '/v0.2/records',\n            record: '/v0.2/record/',\n            sessionslogs: '/v0.2/logs/sessions',\n            tokenslogs: '/v0.2/logs/tokens',\n            tokenlogs: '/v0.2/logs/session/',\n            configurations: '/v0.2/configurations'\n        }\n    }\n\n    /**\n     * Get api basic info\n     * @param cb\n     */\n    info(cb) {\n        request({\n            url: this.apiUrl + this.endpoints.info\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('请求失败: ' + err));\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('服务器内部错误: (' + resp.statusCode + ') ' + body));\n            }\n            let response = JSON.parse(body);\n            return cb(null, response);\n        })\n    }\n\n    /**\n     * Create a session\n     * @param label\n     * @param data\n     * @param live_days\n     * @param type = p2p | rel\n     * @param persistent\n     * @param cb\n     */\n    createSession({label, data, live_days,type='p2p', persistent=false}={}, cb) {\n        let opts = {\n            label: label,\n            data: data,\n            live_days: live_days,\n            type: type,\n            persistent: persistent\n        };\n        request.post({\n            url: this.apiUrl + this.endpoints.sessions,\n            form: opts,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n\n    }\n\n    /**\n     * Query sessions\n     * @param cb\n     */\n    sessions(cb) {\n        request({\n            url: this.apiUrl + this.endpoints.sessions,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Query permanent sessions\n     * @param cb\n     */\n    permanentSessions(cb) {\n        request({\n            url: this.apiUrl + this.endpoints.permanentSessions,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Query temporary sessions\n     * @param cb\n     */\n    temporarySessions(cb) {\n        request({\n            url: this.apiUrl + this.endpoints.temporarySessions,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Get a specific session\n     * @param session_id\n     * @param cb\n     */\n    session(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        request({\n            url: this.apiUrl + this.endpoints.session + session_id,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Update a session\n     * @param session_id\n     * @param label\n     * @param persistent\n     * @param data\n     * @param live_days\n     * @param cb\n     */\n    updateSession({session_id, label, persistent, data, live_days}={}, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        let opts = {\n            session_id: session_id,\n            label: label,\n            persistent: persistent,\n            data: data,\n            live_days: live_days\n        };\n        request.patch({\n            url: this.apiUrl + this.endpoints.session + session_id,\n            form: opts,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Delete a session\n     * @param session_id\n     * @param cb\n     */\n    delSession(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        request.del({\n            url: this.apiUrl + this.endpoints.session + session_id,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            if (body) {\n                let response = JSON.parse(body);\n                // handle response errors\n                if (response.error) {\n                    return cb(new Error(response.error + ': ' + response.description));\n                }\n            }\n\n            cb(null, {status: \"delete successfully\"});\n        });\n    }\n\n    /**\n     * Create a token\n     * @param session_id\n     * @param label\n     * @param data\n     * @param live_days\n     * @param type = 'pub' | 'sub'\n     * @param persistent = true | false\n     * @param cb\n     */\n    createToken({session_id,label,data,live_days, type='pub',persistent=false}={}, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        let opts = {\n            session_id: session_id,\n            label: label,\n            data: data,\n            live_days: live_days,\n            type: type,\n            persistent: persistent\n        };\n        request.post({\n            url: this.apiUrl + this.endpoints.tokens.replace('{session_id}', session_id),\n            form: opts,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n\n    }\n\n    /**\n     * Query tokens\n     * @param session_id\n     * @param cb\n     */\n    tokens(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required');\n        }\n        request({\n            url: this.apiUrl + this.endpoints.tokens.replace('{session_id}', session_id),\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Query permanent tokens\n     * @param session_id\n     * @param cb\n     */\n    permanentTokens(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required');\n        }\n        request({\n            url: this.apiUrl + this.endpoints.permanentTokens.replace('{session_id}', session_id),\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Query temporary tokens\n     * @param session_id\n     * @param cb\n     */\n    temporaryTokens(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required');\n        }\n        request({\n            url: this.apiUrl + this.endpoints.temporaryTokens.replace('{session_id}', session_id),\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Get a token\n     * @param token_id\n     * @param cb\n     */\n    token(token_id, cb){\n        if (typeof token_id === 'undefined') {\n            throw new Error('Token Id is required')\n        }\n        request({\n            url: this.apiUrl + this.endpoints.token + token_id,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Update a token\n     * @param token_id\n     * @param label\n     * @param persistent\n     * @param data\n     * @param live_days\n     * @param cb\n     */\n    updateToken({token_id, label, persistent, data, live_days}={}, cb) {\n        if (typeof token_id === 'undefined') {\n            throw new Error('Token Id is required')\n        }\n        let opts = {\n            token_id: token_id,\n            label: label,\n            persistent: persistent,\n            data: data,\n            live_days: live_days\n        };\n        request.patch({\n            url: this.apiUrl + this.endpoints.token + token_id,\n            form: opts,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            let response = JSON.parse(body);\n\n            // handle response errors\n            if (response.error) {\n                return cb(new Error(`${response.error}: ${response.description}`))\n            }\n\n            cb(null, response);\n        });\n    }\n\n    /**\n     * Delete a token\n     * @param token_id\n     * @param cb\n     */\n    delToken(token_id, cb) {\n        if (typeof token_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        request.del({\n            url: this.apiUrl + this.endpoints.token + token_id,\n            headers: {\n                'X-RTCAT-APIKEY': this.apiKey,\n                'X-RTCAT-SECRET': this.apiSecret\n            }\n        }, function (err, resp, body) {\n            if (err) return cb(new Error('The request failed: ' + err));\n\n            // handle client errors\n            if (resp.statusCode === 403) {\n                return cb(new Error('An authentication error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            // handle server errors\n            if (resp.statusCode >= 500 && resp.statusCode <= 599) {\n                return cb(new Error('A server error occurred: (' + resp.statusCode + ') ' + body));\n            }\n\n            if (body) {\n                let response = JSON.parse(body);\n                // handle response errors\n                if (response.error) {\n                    return cb(new Error(response.error + ': ' + response.description));\n                }\n            }\n\n            cb(null, {status: \"delete successfully\"});\n        });\n    }\n\n}\n\nmodule.exports = Client;"],"sourceRoot":"/source/"}