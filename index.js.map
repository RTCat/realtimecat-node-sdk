{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\nconst request = require('request');\n\nfunction noop() {\n\n}\n\n/**\n * RealTimeCat Client\n */\nclass RealTimeCat {\n\n    /**\n     * Constructor\n     * @param apiKey 实时猫API Key\n     * @param apiSecret 实时猫API Secret\n     * @param apiUrl 后端接口地址,形如https://api.realtimecat.com:443\n     */\n    constructor({apiKey, apiSecret, apiUrl = 'https://api.realtimecat.com:443'}={}) {\n        if (typeof apiKey === 'undefined') {\n            throw new Error('API Key 不能为空')\n        }\n        else if (typeof apiSecret === 'undefined') {\n            throw new Error('API Secret 不能为空')\n        }\n        this._version = 'v0.4';\n        this._apiKey = apiKey;\n        this._apiSecret = apiSecret;\n        this._apiUrl = apiUrl;\n        this._endpoints = {\n            sessions: `/${this._version}/sessions`,\n            permanentSessions: `/${this._version}/sessions/permanent`,\n            temporarySessions: `/${this._version}/sessions/nonpermanent`,\n            session: `/${this._version}/sessions/`,\n            tokens: `/${this._version}/sessions/{session_id}/tokens`,\n            permanentTokens: `/${this._version}/sessions/{session_id}/tokens/permanent`,\n            temporaryTokens: `/${this._version}/sessions/{session_id}/tokens/nonpermanent`,\n            token: `/${this._version}/tokens/`,\n            records: `/${this._version}/records`,\n            record: `/${this._version}/records/`\n        }\n    }\n\n    /**\n     * Create a Session 新建Session\n     * @param label 可选，供开发者区分Session,长度255\n     * @param data 开发者自定义数据,长度1024\n     * @param live_days 存活时间\n     * @param type 类型,仅可以为p2p或rel\n     * @param permanent true/false, 为true时Session永不过期\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     */\n    createSession({label, data, live_days, type = 'p2p', permanent = false}={}, cb) {\n        const opts = {\n            label: label,\n            data: data,\n            live_days: live_days,\n            type: type,\n            permanent: permanent\n        };\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request.post({\n                url: this._apiUrl + this._endpoints.sessions,\n                form: opts,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error);\n                } // handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Query Sessions 获取Session列表\n     * @param opts\n     * @param opts.page 获取第几页\n     * @param opts.page_size 按每页多少条目分页\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     */\n    sessions(opts, cb) {\n        if (typeof opts === 'function') {\n            cb = opts;\n            opts = {};\n        }\n        cb = cb || noop;\n        let url = this._apiUrl + this._endpoints.sessions;\n        if (opts.page && opts.page_size) {\n            url += '?page=' + opts.page + '&page_size=' + opts.page_size;\n        }\n        else if (opts.page_size) {\n            url += '?page_size=' + opts.page_size;\n        }\n        else if (opts.page) {\n            url += '?page=' + opts.page\n        }\n        return new Promise((resolve, reject) => {\n            request({\n                url: url,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error);\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Query Permanent Sessions 获取永久Session列表\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     * @todo: 增加page和page_size参数\n     */\n    permanentSessions(cb) {\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request({\n                url: this._apiUrl + this._endpoints.permanentSessions,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n\n    /**\n     * Query Temporary Sessions 获取临时Session列表\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     * @todo: 增加page和page_size参数\n     */\n    temporarySessions(cb) {\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request({\n                url: this._apiUrl + this._endpoints.temporarySessions,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Get a Specific Session 获取单个Session\n     * @param session_id Session ID\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     */\n    session(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request({\n                url: this._apiUrl + this._endpoints.session + session_id,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Update a Session 修改单个Session\n     * @param session_id Session ID\n     * @param label 可选，供开发者区分Session,长度255\n     * @param permanent true/false, 为true时Session永不过期\n     * @param data 开发者自定义数据,长度1024\n     * @param live_days 存活时间\n     * @param cb 可选，回调函数\n     */\n    updateSession({session_id, label, permanent, data, live_days}={}, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        const opts = {\n            session_id: session_id,\n            label: label,\n            permanent: permanent,\n            data: data,\n            live_days: live_days\n        };\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request.patch({\n                url: this._apiUrl + this._endpoints.session + session_id,\n                form: opts,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Delete a Session 删除单个Session\n     * @param session_id Session ID\n     * @param cb 可选，回调函数\n     */\n    delSession(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request.del({\n                url: this._apiUrl + this._endpoints.session + session_id,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (body) {\n                    let response;\n                    try {\n                        response = JSON.parse(body);\n                    }\n                    catch (err) {\n                        reject(err);\n                        return cb(err);\n                    }\n                    if (response.error) {\n                        const error = new Error(`${response.error}: ${response.description}`);\n                        reject(error);\n                        return cb(error);\n                    } // handle response errors\n                }\n                resolve({status: \"delete successfully\"});\n                cb(null, {status: \"delete successfully\"});\n            });\n        });\n    }\n\n    /**\n     * Create a Token Under a Session 创建Session ID下的Token\n     * @param session_id Session ID\n     * @param label 可选，供开发者区分Token,长度255\n     * @param data 开发者自定义数据,长度1024\n     * @param live_days 存活时间\n     * @param type 类型,仅可以为pub或sub\n     * @param permanent true/false,为true时Token永不过期\n     * @param number 创建个数\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     */\n    createToken({session_id, label, data, live_days, type = 'pub', permanent = false, number = 1}={}, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        const opts = {\n            session_id: session_id,\n            label: label,\n            data: data,\n            live_days: live_days,\n            type: type,\n            permanent: permanent,\n            number: number\n        };\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request.post({\n                url: this._apiUrl + this._endpoints.tokens.replace('{session_id}', session_id),\n                form: opts,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Query Tokens Under a Session 获取Session ID下的所有Token列表\n     * @param opts\n     * @param opts.session_id Session ID\n     * @param opts.page 获取第几页tokens\n     * @param opts.page_size 按每页多少条目分页\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     */\n    tokens(opts, cb) {\n        if (!opts.session_id) {\n            throw new Error('Session Id is required');\n        }\n        let url = this._apiUrl + this._endpoints.tokens.replace('{session_id}', opts.session_id);\n        if (opts.page && opts.page_size) {\n            url += '?page=' + opts.page + '&page_size=' + opts.page_size;\n        }\n        else if (opts.page_size) {\n            url += '?page_size=' + opts.page_size;\n        }\n        else if (opts.page) {\n            url += '?page=' + opts.page\n        }\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request({\n                url: url,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Query Permanent Tokens 获取永久Token列表\n     * @param session_id Session ID\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     * TODO: 增加page和page_size参数\n     */\n    permanentTokens(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required');\n        }\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request({\n                url: this._apiUrl + this._endpoints.permanentTokens.replace('{session_id}', session_id),\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Query Temporary Tokens 获取临时Token列表\n     * @param session_id Session ID\n     * @param cb 可选，回调函数\n     * TODO: 增加page和page_size参数\n     */\n    temporaryTokens(session_id, cb) {\n        if (typeof session_id === 'undefined') {\n            throw new Error('Session Id is required');\n        }\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request({\n                url: this._apiUrl + this._endpoints.temporaryTokens.replace('{session_id}', session_id),\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        });\n    }\n\n    /**\n     * Get a Token 获取单个Token\n     * @param token_id Token ID\n     * @param cb 可选，回调函数\n     */\n    token(token_id, cb) {\n        if (typeof token_id === 'undefined') {\n            throw new Error('Token Id is required')\n        }\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request({\n                url: this._apiUrl + this._endpoints.token + token_id,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        })\n    }\n\n    /**\n     * Update a Token 修改单个Token\n     * @param token_id Token ID\n     * @param label 可选，供开发者区分Token,长度255\n     * @param permanent 为true时Token永不过期\n     * @param data 开发者自定义数据,长度1024\n     * @param live_days 存活时间\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     */\n    updateToken({token_id, label, permanent, data, live_days}={}, cb) {\n        if (typeof token_id === 'undefined') {\n            throw new Error('Token Id is required')\n        }\n        const opts = {\n            token_id: token_id,\n            label: label,\n            permanent: permanent,\n            data: data,\n            live_days: live_days\n        };\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request.patch({\n                url: this._apiUrl + this._endpoints.token + token_id,\n                form: opts,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                let response;\n                try {\n                    response = JSON.parse(body);\n                }\n                catch (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (response.error) {\n                    const error = new Error(`${response.error}: ${response.description}`);\n                    reject(error);\n                    return cb(error)\n                }// handle response errors\n                resolve(response);\n                cb(null, response);\n            });\n        })\n    }\n\n    /**\n     * Delete a Token 删除单个Token\n     * @param token_id Token ID\n     * @param cb 可选，回调函数\n     * @returns {Promise}\n     */\n    delToken(token_id, cb) {\n        if (typeof token_id === 'undefined') {\n            throw new Error('Session Id is required')\n        }\n        cb = cb || noop;\n        return new Promise((resolve, reject) => {\n            request.del({\n                url: this._apiUrl + this._endpoints.token + token_id,\n                headers: {\n                    'X-RTCAT-APIKEY': this._apiKey,\n                    'X-RTCAT-SECRET': this._apiSecret\n                }\n            }, function (err, resp, body) {\n                if (err) {\n                    reject(err);\n                    return cb(err);\n                }\n                if (body) {\n                    let response;\n                    try {\n                        response = JSON.parse(body);\n                    }\n                    catch (err) {\n                        reject(err);\n                        return cb(err);\n                    }\n                    if (response.error) {\n                        const error = new Error(`${response.error}: ${response.description}`);\n                        reject(error);\n                        return cb(error);\n                    } // handle response errors\n                }\n                resolve({status: \"delete successfully\"});\n                cb(null, {status: \"delete successfully\"});\n            });\n        });\n    }\n\n}\n\nmodule.exports = RealTimeCat;"]}